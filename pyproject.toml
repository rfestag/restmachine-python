# Root pyproject.toml for restmachine monorepo
#
# This is a Python monorepo containing multiple packages:
# - packages/restmachine: Core RestMachine framework
# - packages/restmachine-aws: AWS Lambda adapter
# - packages/restmachine-uvicorn: Uvicorn server adapter
# - packages/restmachine-hypercorn: Hypercorn server adapter
#
# To install for development:
#   pip install -e packages/restmachine[dev]
#   pip install -e packages/restmachine-aws[dev]
#
# To run tests:
#   pytest packages/restmachine/tests/
#   pytest packages/restmachine-aws/tests/

[tool.bandit]
# Bandit configuration for security scanning across all packages
exclude_dirs = ["tests", "docs", ".tox", "build", "dist", ".venv"]
skips = [
    "B101",  # Skip assert_used - asserts are fine in tests
    "B601",  # Skip shell injection warnings for paramiko (if used)
]

# Security tests to run
tests = [
    "B102", "B103", "B104", "B105", "B106", "B107", "B108", "B110",
    "B112", "B201", "B301", "B302", "B303", "B304", "B305", "B306",
    "B307", "B308", "B309", "B310", "B311", "B312", "B313", "B314",
    "B315", "B316", "B317", "B318", "B319", "B320", "B321", "B322",
    "B323", "B324", "B325", "B401", "B402", "B403", "B404", "B405",
    "B406", "B407", "B408", "B409", "B410", "B411", "B412", "B413",
    "B501", "B502", "B503", "B504", "B505", "B506", "B507", "B601",
    "B602", "B603", "B604", "B605", "B606", "B607", "B608", "B609",
    "B610", "B611", "B701", "B702", "B703"
]

[tool.bandit.assert_used]
skips = ["*_test.py", "*/test_*.py", "test_*.py"]

[tool.detect-secrets]
plugins_used = [
    { name = "ArtifactoryDetector" },
    { name = "AWSKeyDetector" },
    { name = "AzureStorageKeyDetector" },
    { name = "Base64HighEntropyString", limit = 4.5 },
    { name = "BasicAuthDetector" },
    { name = "CloudantDetector" },
    { name = "DiscordBotTokenDetector" },
    { name = "GitHubTokenDetector" },
    { name = "HexHighEntropyString", limit = 3.0 },
    { name = "IbmCloudIamDetector" },
    { name = "IbmCosHmacDetector" },
    { name = "JwtTokenDetector" },
    { name = "KeywordDetector", keyword_exclude = "" },
    { name = "MailchimpDetector" },
    { name = "NpmDetector" },
    { name = "PrivateKeyDetector" },
    { name = "SendGridDetector" },
    { name = "SlackDetector" },
    { name = "SoftlayerDetector" },
    { name = "SquareOAuthDetector" },
    { name = "StripeDetector" },
    { name = "TwilioKeyDetector" }
]

filters_used = [
    { path = "detect_secrets.filters.allowlist.is_line_allowlisted" },
    { path = "detect_secrets.filters.common.is_baseline_file" },
    { path = "detect_secrets.filters.common.is_ignored_due_to_verification_policies", min_level = 2 },
    { path = "detect_secrets.filters.heuristic.is_indirect_reference" },
    { path = "detect_secrets.filters.heuristic.is_likely_id_string" },
    { path = "detect_secrets.filters.heuristic.is_lock_file" },
    { path = "detect_secrets.filters.heuristic.is_not_alphanumeric_string" },
    { path = "detect_secrets.filters.heuristic.is_potential_uuid" },
    { path = "detect_secrets.filters.heuristic.is_prefixed_with_dollar_sign" },
    { path = "detect_secrets.filters.heuristic.is_sequential_string" },
    { path = "detect_secrets.filters.heuristic.is_swagger_file" },
    { path = "detect_secrets.filters.heuristic.is_templated_secret" }
]

exclude_files = "^(docs/|\\.tox/|\\.git/|.*\\.lock$|.*\\.json$|bandit-report\\.json|safety-report\\.json|semgrep-report\\.json)"

[tool.ruff]
# Ruff configuration for all packages
target-version = "py39"
line-length = 120
exclude = [
    ".git",
    ".tox",
    ".venv",
    "build",
    "dist",
    "__pycache__",
]

[tool.mypy]
# MyPy configuration for all packages
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
check_untyped_defs = true

[[tool.mypy.overrides]]
module = "jinja2.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "pydantic.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "uvicorn.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "hypercorn.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "restmachine.testing.*"
follow_imports = "skip"
ignore_errors = true

[tool.pytest.ini_options]
# Global pytest configuration
testpaths = ["packages/*/tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
# Exclude performance tests by default (use -m performance to run them)
addopts = "-v --tb=short -m 'not performance'"
markers = [
    "driver_direct: Tests using direct driver",
    "driver_aws_lambda: Tests using AWS Lambda driver",
    "driver_uvicorn_http1: Tests using Uvicorn HTTP/1.1 driver",
    "driver_hypercorn_http1: Tests using Hypercorn HTTP/1.1 driver",
    "driver_hypercorn_http2: Tests using Hypercorn HTTP/2 driver",
    "performance: Performance benchmark tests (deselect with '-m \"not performance\"')",
]
filterwarnings = [
    "ignore:websockets.legacy is deprecated.*:DeprecationWarning",
    "ignore:websockets.server.WebSocketServerProtocol is deprecated.*:DeprecationWarning",
]

[tool.coverage.run]
omit = [
    "*/testing/*",  # Test infrastructure shouldn't count toward coverage
    "*/servers.py",  # CLI entry points tested manually
    "*/server.py",  # ASGI server creation tested by integration tests
    "*/state_machine.py",  # Legacy state machine, delegated to by v2
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]
